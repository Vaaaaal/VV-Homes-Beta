#!/usr/bin/env node

// ==========================================
// SCRIPT DE NETTOYAGE DES CONSOLE.LOG
// ==========================================

const fs = require('fs');
const path = require('path');

// Configuration du script
const CONFIG = {
  // R√©pertoire de travail
  workingDir: __dirname,
  
  // Extensions de fichiers √† traiter
  extensions: ['.js'],
  
  // Fichiers √† ignorer
  ignoredFiles: [
    'cleanup-console.js',
    'logger.js',
    'validation-test.js', // Fichier de test
  ],
  
  // Patterns de remplacement
  replacements: [
    // console.log avec emojis -> logger avec cat√©gorie appropri√©e
    { 
      pattern: /console\.log\s*\(\s*['"`]üöÄ([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.loading('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]‚úÖ([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.success('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üß≠([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.orientation('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üìú([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.scroll('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üéöÔ∏è([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.slider('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üçî([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.menu('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]ü™ü([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.modal('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üé≠([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.animation('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üîÑ([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.info('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]‚è≠Ô∏è([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.debug('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üßπ([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.debug('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üìù([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.debug('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üé†([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.debug('$1'$2)" 
    },
    { 
      pattern: /console\.log\s*\(\s*['"`]üéâ([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.success('$1'$2)" 
    },
    
    // console.warn avec emojis
    { 
      pattern: /console\.warn\s*\(\s*['"`]‚ö†Ô∏è([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.warn('$1'$2)" 
    },
    { 
      pattern: /console\.warn\s*\(\s*['"`]üö®([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.emergency('$1'$2)" 
    },
    { 
      pattern: /console\.warn\s*\(\s*['"`]üìñ([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.emergency('$1'$2)" 
    },
    
    // console.error avec emojis
    { 
      pattern: /console\.error\s*\(\s*['"`]‚ùå([^'"`]+)['"`]([^)]*)\)/g, 
      replacement: "logger.error('$1'$2)" 
    },
    
    // console.log/warn/error g√©n√©riques (sans emojis)
    { 
      pattern: /console\.log\(/g, 
      replacement: "logger.log(" 
    },
    { 
      pattern: /console\.warn\(/g, 
      replacement: "logger.warn(" 
    },
    { 
      pattern: /console\.error\(/g, 
      replacement: "logger.error(" 
    },
    { 
      pattern: /console\.info\(/g, 
      replacement: "logger.info(" 
    },
    { 
      pattern: /console\.debug\(/g, 
      replacement: "logger.debug(" 
    }
  ]
};

/**
 * R√©cup√®re tous les fichiers JavaScript du r√©pertoire
 */
function getJavaScriptFiles(dir) {
  const files = [];
  
  function scanDirectory(currentDir) {
    const items = fs.readdirSync(currentDir);
    
    for (const item of items) {
      const fullPath = path.join(currentDir, item);
      const stat = fs.statSync(fullPath);
      
      if (stat.isDirectory()) {
        // Ignorer node_modules et autres dossiers syst√®me
        if (!item.startsWith('.') && item !== 'node_modules') {
          scanDirectory(fullPath);
        }
      } else if (stat.isFile()) {
        const ext = path.extname(item);
        const fileName = path.basename(item);
        
        if (CONFIG.extensions.includes(ext) && !CONFIG.ignoredFiles.includes(fileName)) {
          files.push(fullPath);
        }
      }
    }
  }
  
  scanDirectory(dir);
  return files;
}

/**
 * V√©rifie si un fichier contient d√©j√† l'import du logger
 */
function hasLoggerImport(content) {
  return content.includes("import logger from './logger.js'") || 
         content.includes("import logger from './logger'");
}

/**
 * Ajoute l'import du logger en haut du fichier
 */
function addLoggerImport(content) {
  if (hasLoggerImport(content)) {
    return content;
  }
  
  // Trouver la position apr√®s les autres imports
  const lines = content.split('\n');
  let importEndIndex = 0;
  
  for (let i = 0; i < lines.length; i++) {
    const line = lines[i].trim();
    if (line.startsWith('import ') && !line.includes('logger')) {
      importEndIndex = i + 1;
    } else if (line === '' && importEndIndex > 0) {
      // Ligne vide apr√®s les imports
      break;
    } else if (!line.startsWith('//') && !line.startsWith('/*') && line !== '' && importEndIndex > 0) {
      // Premi√®re ligne de code apr√®s les imports
      break;
    }
  }
  
  // Ins√©rer l'import du logger
  lines.splice(importEndIndex, 0, "import logger from './logger.js';");
  
  return lines.join('\n');
}

/**
 * Applique les remplacements sur un fichier
 */
function processFile(filePath) {
  console.log(`üìù Traitement de: ${path.basename(filePath)}`);
  
  let content = fs.readFileSync(filePath, 'utf8');
  let hasChanges = false;
  
  // V√©rifier s'il y a des console.* √† remplacer
  const hasConsole = /console\.(log|warn|error|info|debug)/.test(content);
  
  if (!hasConsole) {
    console.log(`  ‚è≠Ô∏è  Aucun console.* trouv√©`);
    return;
  }
  
  // Ajouter l'import du logger si n√©cessaire
  if (!hasLoggerImport(content)) {
    content = addLoggerImport(content);
    hasChanges = true;
    console.log(`  ‚ûï Import du logger ajout√©`);
  }
  
  // Appliquer les remplacements
  let replacementCount = 0;
  
  for (const { pattern, replacement } of CONFIG.replacements) {
    const before = content;
    content = content.replace(pattern, replacement);
    
    if (content !== before) {
      hasChanges = true;
      // Compter le nombre de remplacements
      const matches = before.match(pattern);
      if (matches) {
        replacementCount += matches.length;
      }
    }
  }
  
  if (hasChanges) {
    fs.writeFileSync(filePath, content, 'utf8');
    console.log(`  ‚úÖ ${replacementCount} remplacements effectu√©s`);
  } else {
    console.log(`  ‚ÑπÔ∏è  Aucun changement n√©cessaire`);
  }
}

/**
 * Script principal
 */
function main() {
  console.log('üßπ NETTOYAGE DES CONSOLE.LOG');
  console.log('============================');
  
  const files = getJavaScriptFiles(CONFIG.workingDir);
  
  console.log(`üìÅ ${files.length} fichiers JavaScript trouv√©s`);
  console.log('');
  
  for (const file of files) {
    processFile(file);
  }
  
  console.log('');
  console.log('‚úÖ Nettoyage termin√© !');
  console.log('');
  console.log('üìã Prochaines √©tapes:');
  console.log('  1. V√©rifiez que le fichier logger.js est bien import√© dans script.js');
  console.log('  2. Testez votre application en mode d√©veloppement');
  console.log('  3. Activez le mode production avec: logger.setProductionMode(true)');
  console.log('  4. Ou d√©finissez window.VV_PRODUCTION = true en production');
}

// Ex√©cuter le script
main();
